  'Create Schema':
    'prefix': 'CreatesSchema-pg'
    'description': 'Check to see if the schema already exists and if it does\'t, create it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
      	v_rec varchar;
      	v_schema varchar[] := array[ '$1', '$2' .... ];
      BEGIN

      	FOREACH v_rec IN ARRAY v_schema
      	LOOP
      		IF NOT EXISTS ( SELECT 1 FROM information_schema.schemata WHERE schema_name = v_rec ) THEN
      			RAISE INFO 'Creating schema %', v_rec;
            -- E.g. CREATE SCHEMA foo;
      			EXECUTE 'CREATE SCHEMA ' || v_rec || ';';
      		ELSE
      			RAISE INFO 'Schema % already exists', v_rec;
      		END IF;
      	END LOOP;

      END$$

      """

  'Drop Schema':
    'prefix': 'DropSchema-pg'
    'description': 'Check to see if the schema already exists and if it does, drop it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
      	v_rec varchar;
      	v_schema varchar[] := array[ '$1', '$2' .... ];
      BEGIN

      	FOREACH v_rec IN ARRAY v_schema
      	LOOP
      		IF EXISTS ( SELECT 1 FROM information_schema.schemata WHERE schema_name = v_rec ) THEN
      			RAISE INFO 'Dropping schema %', v_rec;
            -- E.g. DROP SCHEMA foo;
      			EXECUTE 'DROP SCHEMA ' || v_rec || ';';
      		ELSE
      			RAISE INFO 'Schema % doesn''t exists', v_rec;
      		END IF;
      	END LOOP;

      END$$

      """

  'Create Table':
    'prefix': 'CreateTable-pg'
    'description': 'Check to see if the table already exists and if it does\'t, create it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
      BEGIN

        IF NOT EXISTS ( SELECT 1 FROM information_schema.tables WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table ) THEN
          RAISE INFO 'Creating table %.%', v_schema, v_table;
          /* E.g. CREATE TABLE foo.bar (
                    id serial primary key,
                    name varchar(25)
                  );
          */
          EXECUTE 'CREATE TABLE ' || v_schema || '.' || v_table || ' (
            ${4:Column Definitions}
          );';
        ELSE
          RAISE INFO 'TABLE %.% already exists', v_schema, v_table;
        END IF;

      END$$

      """

  'Drop Table':
    'prefix': 'DropTable-pg'
    'description': 'Check to see if the table exists, if it does, drop it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
      BEGIN

        IF EXISTS ( SELECT 1 FROM information_schema.tables WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table ) THEN
          RAISE INFO 'Dropping %.%', v_schema, v_table;
          -- E.g. DROP TABLE foo.bar;
          EXECUTE 'DROP TABLE ' || v_schema || '.' || v_table || ';';
        ELSE
          RAISE INFO 'TABLE %.% doesn\''t exist', v_schema, v_table;
        END IF;

      END$$

      """

  'Add Column':
    'prefix': 'AddColumn-pg'
    'description': 'Check to see if the specified column already exists, if it doesn\'t, add it to the table'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
        v_column varchar := '$4';
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table AND column_name = v_column) THEN
          RAISE INFO 'Adding column % to table %.%', v_column, v_schema, v_table;
          -- E.g. ALTER TABLE foo.bar ADD COLUMN baz varchar(25);
          EXECUTE 'ALTER TABLE ' || v_schema || '.' || v_table || ' ADD COLUMN ' || v_column || ' ${5:Column Type & defaults etc};';
        ELSE
          RAISE INFO 'Column % already exists on table %.%', v_column, v_schema, v_table;
        END IF;

      END$$

    """

  'Drop Column':
    'prefix': 'DropColumn-pg'
    'description': 'Check to see if the specified column exists, if it does, drop it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
        v_column varchar := '$4';
      BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table AND column_name = v_column) THEN
          RAISE INFO 'Dropping column % to table %.%', v_column, v_schema, v_table;
          -- E.g. ALTER TABLE foo.bar DROP COLUMN baz;
          EXECUTE 'ALTER TABLE ' || v_schema || '.' || v_table || ' DROP COLUMN ' || v_column || ';';
        ELSE
          RAISE INFO 'Column % doesn''t exists on table %.%', v_column, v_schema, v_table;
        END IF;

      END$$

    """

  'Add Constraint':
    'prefix': 'AddConstraint-pg'
    'description': 'Check to see if the constraint exists, if it doesn\'t, add it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
        v_column varchar := '$4';
        v_constraint varchar := '$5';
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM information_schema.constraint_column_usage WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table AND column_name = v_column AND constraint_name = v_constraint) THEN
          RAISE INFO 'Adding constraint % to table %.%', v_constraint, v_schema, v_table;
          -- E.g. ALTER TABLE foo.bar ADD CONSTRAINT enforce_srid_geometry CHECK (ST_SRID(geometry) = 4326);
          EXECUTE 'ALTER TABLE ' || v_schema || '.' || v_table || ' ADD CONSTRAINT ' || v_constraint || ' ${6:Contraint definition};';
        ELSE
          RAISE INFO 'Constraint % already exists on table %.%', v_constraint, v_schema, v_table;
        END IF;

      END$$

    """

  'Drop Constraint':
    'prefix': 'DropConstraint-pg'
    'description': 'Check to see if the constraint exists, if it does, drop it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_database varchar := '$1';
        v_schema varchar := '$2';
        v_table varchar := '$3';
        v_column varchar := '$4';
        v_constraint varchar := '$5';
      BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.constraint_column_usage WHERE table_catalog = v_database AND table_schema = v_schema AND table_name = v_table AND column_name = v_column AND constraint_name = v_constraint) THEN
          RAISE INFO 'Dropping constraint % on table %.%', v_constraint, v_schema, v_table;
          -- E.g. ALTER TABLE foo.bar DROP CONSTRAINT enforce_srid_geometry;
          EXECUTE 'ALTER TABLE ' || v_schema || '.' || v_table || ' DROP CONSTRAINT ' || v_constraint || ';';
        ELSE
          RAISE INFO 'Constraint % doesn''t exists on table %.%', v_constraint, v_schema, v_table;
        END IF;

      END$$

    """

  'Add Index':
    'prefix': 'AddIndex-pg'
    'description': 'Check to see if index exists, if it doesn\'t, add it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_schema varchar := '$1';
        v_table varchar := '$2';
        v_index_type varchar := '$3';
        v_index_column varchar := '$4';
        v_index_name varchar := 'idx_$4_$3';
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = v_index_name AND n.nspname = v_schema) THEN
          RAISE INFO 'Adding index %', v_index_name;
          -- E.g. CREATE INDEX idx_name_btree ON foo.bar USING btree(name);
          EXECUTE 'CREATE INDEX ' || v_index_name || ' ON ' || v_schema || '.' || v_table || ' USING ' || v_index_type || '(' || v_index_column || ');';
        ELSE
          RAISE INFO 'INDEX % already exists on table %.%', v_index_name, v_schema, v_table;
        END IF;

      END$$

    """

  'Drop Index':
    'prefix': 'DropIndex-pg'
    'description': 'Check to see if index exists, if it does, drop it'
    'leftLabelHTML': 'Postgres'
    'body': """
      DO
      $$DECLARE
        v_schema varchar := '$1';
        v_table varchar := '$2';
        v_index_type varchar := '$3';
        v_index_column varchar := '$4';
        v_index_name varchar := 'idx_$4_$3';
      BEGIN
        IF EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = v_index_name AND n.nspname = v_schema) THEN
          RAISE INFO 'Dropping index %', v_index_name;
          -- E.g. DROP INDEX idx_name_btree;
          EXECUTE 'DROP INDEX ' || v_schema || '.' || v_index_name || ';';
        ELSE
          RAISE INFO 'INDEX % doesn''t exists', v_index_name;
        END IF;

      END$$

    """
